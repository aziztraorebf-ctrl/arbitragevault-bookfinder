#!/usr/bin/env python3
"""
Script d'initialisation directe des tables AutoSourcing.
√âvite les probl√®mes de migration Alembic avec les types JSONB existants.
"""
import asyncio
from sqlalchemy import create_engine
from sqlalchemy.ext.asyncio import create_async_engine

from app.core.settings import get_settings
from app.models.autosourcing import Base, SavedProfile

async def init_autosourcing_tables():
    """Initialise les tables AutoSourcing et cr√©e les profils par d√©faut."""
    
    settings = get_settings()
    
    # Cr√©er engine async
    engine = create_async_engine(settings.database_url)
    
    print("üîß Cr√©ation des tables AutoSourcing...")
    
    async with engine.begin() as conn:
        # Cr√©er seulement les nouvelles tables
        await conn.run_sync(Base.metadata.create_all)
    
    print("‚úÖ Tables cr√©√©es avec succ√®s")
    
    # Cr√©er les profils par d√©faut
    print("üéØ Cr√©ation des profils par d√©faut...")
    
    async with engine.begin() as conn:
        from sqlalchemy.ext.asyncio import AsyncSession
        async with AsyncSession(engine) as session:
            # V√©rifier si des profils existent d√©j√†
            from sqlalchemy import text, select
            result = await session.execute(select(SavedProfile))
            count = len(result.all())
            
            if count == 0:
                default_profiles = SavedProfile.create_default_profiles()
                session.add_all(default_profiles)
                await session.commit()
                print(f"‚úÖ {len(default_profiles)} profils par d√©faut cr√©√©s")
            else:
                print(f"‚ÑπÔ∏è  {count} profils d√©j√† pr√©sents")
    
    await engine.dispose()
    
    print("üéâ Initialisation AutoSourcing termin√©e!")

if __name__ == "__main__":
    asyncio.run(init_autosourcing_tables())