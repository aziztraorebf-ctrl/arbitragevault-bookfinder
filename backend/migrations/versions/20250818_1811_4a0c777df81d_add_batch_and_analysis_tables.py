"""add_batch_and_analysis_tables

Revision ID: 4a0c777df81d
Revises: f87fea7f163c
Create Date: 2025-08-18 18:11:43.527087

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = "4a0c777df81d"
down_revision = "f87fea7f163c"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "batches",
        sa.Column("user_id", sa.String(length=36), nullable=False),
        sa.Column("name", sa.String(length=255), nullable=False),
        sa.Column(
            "status",
            sa.Enum("PENDING", "RUNNING", "DONE", "FAILED", name="batch_status"),
            nullable=False,
        ),
        sa.Column("items_total", sa.Integer(), nullable=False),
        sa.Column("items_processed", sa.Integer(), nullable=False),
        sa.Column("started_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("finished_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("strategy_snapshot", sa.JSON(), nullable=True),
        sa.Column("id", sa.String(length=36), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.CheckConstraint(
            "items_processed <= items_total", name="check_processed_not_exceed_total"
        ),
        sa.CheckConstraint(
            "items_processed >= 0", name="check_items_processed_positive"
        ),
        sa.CheckConstraint("items_total >= 0", name="check_items_total_positive"),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index("ix_batches_status", "batches", ["status"], unique=False)
    op.create_index(
        "ix_batches_user_created", "batches", ["user_id", "created_at"], unique=False
    )
    op.create_table(
        "analyses",
        sa.Column("batch_id", sa.String(length=36), nullable=False),
        sa.Column("isbn_or_asin", sa.String(length=20), nullable=False),
        sa.Column("buy_price", sa.Numeric(precision=12, scale=2), nullable=False),
        sa.Column("fees", sa.Numeric(precision=12, scale=2), nullable=False),
        sa.Column(
            "expected_sale_price", sa.Numeric(precision=12, scale=2), nullable=False
        ),
        sa.Column("profit", sa.Numeric(precision=12, scale=2), nullable=False),
        sa.Column("roi_percent", sa.Numeric(precision=6, scale=2), nullable=False),
        sa.Column("velocity_score", sa.Numeric(precision=6, scale=2), nullable=False),
        sa.Column("rank_snapshot", sa.Integer(), nullable=True),
        sa.Column("offers_count", sa.Integer(), nullable=True),
        sa.Column("raw_keepa", sa.JSON(), nullable=True),
        sa.Column("id", sa.String(length=36), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.CheckConstraint("buy_price >= 0", name="check_buy_price_positive"),
        sa.CheckConstraint(
            "expected_sale_price >= 0", name="check_sale_price_positive"
        ),
        sa.CheckConstraint("fees >= 0", name="check_fees_positive"),
        sa.CheckConstraint("velocity_score <= 100", name="check_velocity_score_max"),
        sa.CheckConstraint("velocity_score >= 0", name="check_velocity_score_min"),
        sa.ForeignKeyConstraint(["batch_id"], ["batches.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("batch_id", "isbn_or_asin", name="uq_analysis_batch_isbn"),
    )
    op.create_index("ix_analyses_batch_id", "analyses", ["batch_id"], unique=False)
    op.create_index("ix_analyses_isbn", "analyses", ["isbn_or_asin"], unique=False)
    op.create_index("ix_analyses_roi", "analyses", ["roi_percent"], unique=False)
    op.create_index(
        "ix_analyses_velocity", "analyses", ["velocity_score"], unique=False
    )
    # Note: Skipping ALTER COLUMN operations for SQLite compatibility
    # The users and refresh_tokens tables already use correct UUID type
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Note: Skipping ALTER COLUMN operations for SQLite compatibility
    op.drop_index("ix_analyses_velocity", table_name="analyses")
    op.drop_index("ix_analyses_roi", table_name="analyses")
    op.drop_index("ix_analyses_isbn", table_name="analyses")
    op.drop_index("ix_analyses_batch_id", table_name="analyses")
    op.drop_table("analyses")
    op.drop_index("ix_batches_user_created", table_name="batches")
    op.drop_index("ix_batches_status", table_name="batches")
    op.drop_table("batches")
    # Drop the enum after tables are dropped
    op.execute("DROP TYPE batch_status")
    # ### end Alembic commands ###
