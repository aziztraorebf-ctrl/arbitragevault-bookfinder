"""
Tests unitaires directs des composants critiques - Sans serveur FastAPI
Validation rapide des corrections backend
"""
import asyncio
import sys
from pathlib import Path
sys.path.append(str(Path(__file__).parent))

async def test_imports_and_corrections():
    """Test 1: V√©rification imports et corrections critiques"""
    print("üîß Test des imports et corrections...")
    
    try:
        # Test import principal
        from app.main import app
        print("‚úÖ app.main import√©")
        
        # Test imports routers corrig√©s
        from app.api.v1.routers.batches import router as batches_router
        from app.api.v1.routers.analyses import router as analyses_router
        print("‚úÖ Routers batches/analyses import√©s")
        
        # Test imports repositories (utilis√©s dans corrections)
        from app.repositories.batch_repository import BatchRepository
        from app.repositories.analysis_repository import AnalysisRepository
        print("‚úÖ Repositories import√©s")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur import: {e}")
        return False

async def test_database_models():
    """Test 2: Mod√®les de base de donn√©es"""
    print("üìä Test des mod√®les BDD...")
    
    try:
        from app.models.batch import Batch, BatchStatus
        from app.models.analysis import Analysis
        
        # Test cr√©ation instance mod√®le avec tous les champs requis
        batch = Batch(
            user_id="test-user-id",  # Champ requis
            name="Test Batch",
            description="Test unitaire",  # Maintenant support√©
            status=BatchStatus.PENDING,
            items_total=5
        )
        print(f"‚úÖ Mod√®le Batch cr√©√©: {batch.name}")
        
        # Test statuts (codes corrects)
        available_statuses = [BatchStatus.PENDING, BatchStatus.RUNNING, BatchStatus.DONE, BatchStatus.FAILED]
        assert BatchStatus.PENDING in available_statuses
        print(f"‚úÖ Statuts BatchStatus valid√©s: {[s.value for s in available_statuses]}")
        
        # Test nouvelles propri√©t√©s
        assert batch.progress_percentage == 0.0  # Aucun item trait√©
        assert batch.can_transition_to(BatchStatus.RUNNING) == True
        print("‚úÖ Propri√©t√©s et transitions batch valid√©es")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur mod√®les: {e}")
        return False

async def test_services_logic():
    """Test 3: Logique services critiques"""
    print("‚öôÔ∏è Test logique services...")
    
    try:
        # Test service SalesVelocity (v1.9.0) avec m√©thode corrig√©e
        from app.services.sales_velocity_service import SalesVelocityService
        
        service = SalesVelocityService()
        
        # Test calcul v√©locit√© avec donn√©es simul√©es
        mock_keepa_data = {
            "salesRankDrops30": 15,
            "salesRankDrops90": 45,
            "current": {"BUY_BOX": [1699]}  # 16.99$
        }
        
        # Test nouvelle m√©thode wrapper
        velocity_score = service.calculate_velocity_score(mock_keepa_data)
        print(f"‚úÖ Velocity score calcul√©: {velocity_score:.2f}")
        
        # Test m√©thode principale
        velocity_analysis = service.analyze_product_velocity({
            "asin": "TEST123",
            "sales_drops_30": 15,
            "sales_drops_90": 45,
            "current_bsr": 5000,
            "category": "Books"
        })
        print(f"‚úÖ Analyse v√©locit√©: tier {velocity_analysis.get('velocity_tier', 'UNKNOWN')}")
        
        # Test service StockEstimate (v1.8.0) - v√©rification structure seulement
        try:
            from app.services.stock_estimate_service import StockEstimateService
            print("‚úÖ StockEstimateService import√© (n√©cessite deps pour instantiation)")
            
            # V√©rifier m√©thodes disponibles sans instancier
            methods = [attr for attr in dir(StockEstimateService) if not attr.startswith('_')]
            if 'calculate_stock_suggestion' in methods:
                print("‚úÖ M√©thode calculate_stock_suggestion disponible")
            else:
                print("‚ö†Ô∏è M√©thode calculate_stock_suggestion manquante")
                
        except Exception as stock_e:
            print(f"‚ö†Ô∏è StockEstimateService non test√©: {stock_e}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur services: {e}")
        import traceback
        print(f"   D√©tail: {traceback.format_exc()}")
        return False

async def test_strategic_views_config():
    """Test 4: Configuration vues strat√©giques"""
    print("üéØ Test configuration vues strat√©giques...")
    
    try:
        from app.services.strategic_views_service import StrategicViewsService
        
        service = StrategicViewsService()
        
        # Test r√©cup√©ration configuration
        profit_hunter = service.get_view_config("profit_hunter")
        velocity = service.get_view_config("velocity")
        
        print(f"‚úÖ Profit Hunter: poids ROI {profit_hunter.roi_weight}")
        print(f"‚úÖ Velocity: poids v√©locit√© {velocity.velocity_weight}")
        
        # Test calcul score
        mock_analysis = {
            "roi_percentage": 75.5,
            "velocity_score": 0.8,
            "competition_level": "MEDIUM",
            "profit_estimate": 12.50
        }
        
        score = service.calculate_strategic_score("profit_hunter", mock_analysis)
        print(f"‚úÖ Score strat√©gique calcul√©: {score:.2f}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur vues strat√©giques: {e}")
        return False

async def test_keepa_service_structure():
    """Test 5: Structure service Keepa (sans API call)"""
    print("üîó Test structure service Keepa via Factory...")
    
    try:
        # Test factory pattern pour gestion API key
        from app.services.keepa_service_factory import KeepaServiceFactory
        
        print("‚úÖ Factory Keepa import√©")
        
        # Test m√©thodes factory disponibles
        factory_methods = [attr for attr in dir(KeepaServiceFactory) if not attr.startswith('_')]
        expected_factory_methods = ['get_keepa_service', 'create_test_service', 'reset_instance']
        
        for method in expected_factory_methods:
            if method in factory_methods:
                print(f"‚úÖ Factory m√©thode {method} pr√©sente")
            else:
                print(f"‚ö†Ô∏è Factory m√©thode {method} manquante")
        
        # Test cr√©ation service test (sans vraie API key)
        test_service = KeepaServiceFactory.create_test_service("test-api-key-12345")
        print("‚úÖ Service Keepa cr√©√© via factory pour tests")
        
        # Test m√©thodes service (sans appel API)
        service_methods = [attr for attr in dir(test_service) if not attr.startswith('_')]
        critical_methods = ['product_lookup', 'close']  # M√©thodes critiques attendues
        
        present_methods = [m for m in critical_methods if m in service_methods]
        print(f"‚úÖ M√©thodes service pr√©sentes: {len(present_methods)}/{len(critical_methods)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur service Keepa: {e}")
        import traceback
        print(f"   D√©tail: {traceback.format_exc()}")
        return False

async def run_all_component_tests():
    """Lance tous les tests unitaires rapidement"""
    print("üß™ D√âBUT TESTS COMPOSANTS DIRECTS")
    print("=" * 50)
    
    tests = [
        ("Imports & Corrections", test_imports_and_corrections),
        ("Mod√®les BDD", test_database_models),
        ("Logique Services", test_services_logic),
        ("Vues Strat√©giques", test_strategic_views_config),
        ("Structure Keepa", test_keepa_service_structure)
    ]
    
    results = {}
    
    for test_name, test_func in tests:
        try:
            result = await test_func()
            results[test_name] = result
            print()
        except Exception as e:
            print(f"‚ùå {test_name} - ERREUR: {e}")
            results[test_name] = False
            print()
    
    # R√©sum√©
    print("=" * 50)
    passed = sum(results.values())
    total = len(results)
    
    for test_name, result in results.items():
        status = "‚úÖ" if result else "‚ùå"
        print(f"{status} {test_name}")
    
    print(f"\nüìä R√âSULTATS: {passed}/{total} tests r√©ussis")
    
    if passed >= total * 0.8:  # 80% r√©ussite
        print("‚úÖ COMPOSANTS VALID√âS - Pr√™t pour Option B (Git)")
        return True
    else:
        print("‚ö†Ô∏è COMPOSANTS PARTIELS - Corrections requises")
        return False

if __name__ == "__main__":
    success = asyncio.run(run_all_component_tests())
    exit(0 if success else 1)