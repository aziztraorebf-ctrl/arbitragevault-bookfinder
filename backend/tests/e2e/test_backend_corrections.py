"""
Tests end-to-end pour valider les corrections majeures du backend
V√©rifie que les endpoints utilisent la BDD r√©elle au lieu de donn√©es simul√©es
"""
import pytest
import httpx
import asyncio
from datetime import datetime, timezone
from typing import Dict, Any

# Configuration des tests
BASE_URL = "http://localhost:8000"
TEST_TIMEOUT = 30.0

class TestBackendCorrections:
    """Tests end-to-end des corrections majeures backend"""
    
    @pytest.fixture
    def sample_batch_data(self):
        """Donn√©es de test pour cr√©ation de batch"""
        return {
            "name": "E2E Test Batch - Backend Corrections",
            "description": "Test automatis√© des corrections backend",
            "asin_list": [
                "1292025824",  # Business Analytics - ISBN connu
                "0134683943",  # Computer Networks - ISBN connu  
                "1337569321"   # Calculus - ISBN connu
            ],
            "config_name": "profit_hunter"
        }
    
    @pytest.fixture
    def sample_isbn_batch(self):
        """Batch avec ISBNs pour tests Keepa"""
        return {
            "name": "E2E ISBN Test Batch",
            "description": "Test avec ISBNs r√©els pour validation Keepa",
            "asin_list": [
                "9781292025827",  # Business Analytics ISBN-13
                "9780134683943",  # Computer Networks ISBN-13
                "9781337569323"   # Calculus ISBN-13
            ],
            "config_name": "velocity"
        }

    async def test_server_health(self):
        """Test 1: V√©rification que le serveur FastAPI fonctionne"""
        async with httpx.AsyncClient(timeout=TEST_TIMEOUT) as client:
            response = await client.get(f"{BASE_URL}/health")
            
        assert response.status_code == 200
        data = response.json()
        assert data["status"] == "healthy"
        assert "timestamp" in data
        print("‚úÖ Serveur FastAPI op√©rationnel")

    async def test_batches_list_real_data(self):
        """Test 2: GET /batches retourne donn√©es r√©elles BDD (pas de stub)"""
        async with httpx.AsyncClient(timeout=TEST_TIMEOUT) as client:
            response = await client.get(f"{BASE_URL}/api/v1/batches?page=1&size=10")
            
        assert response.status_code == 200
        data = response.json()
        
        # V√©rification structure r√©elle (pas de PHASE_1_STUB)
        assert "items" in data
        assert "total" in data
        assert "page" in data
        assert "size" in data
        
        # V√©rification que ce ne sont pas des stubs
        assert "PHASE_1_STUB" not in str(data)
        assert "mock data" not in str(data)
        
        print(f"‚úÖ GET /batches retourne {data['total']} batches r√©els (pas de stubs)")

    async def test_create_batch_real_persistence(self, sample_batch_data):
        """Test 3: POST /batches persiste en BDD r√©elle"""
        async with httpx.AsyncClient(timeout=TEST_TIMEOUT) as client:
            response = await client.post(f"{BASE_URL}/api/v1/batches", json=sample_batch_data)
            
        assert response.status_code == 201
        batch = response.json()
        
        # V√©rification donn√©es persist√©es
        assert batch["name"] == sample_batch_data["name"]
        assert batch["description"] == sample_batch_data["description"]
        assert batch["status"] in ["pending", "processing", "completed"]
        assert "id" in batch
        assert "created_at" in batch
        
        # V√©rification r√©cup√©ration par ID
        batch_id = batch["id"]
        response = await client.get(f"{BASE_URL}/api/v1/batches/{batch_id}")
        assert response.status_code == 200
        retrieved_batch = response.json()
        assert retrieved_batch["id"] == batch_id
        
        print(f"‚úÖ Batch cr√©√© et persist√© en BDD: ID {batch_id}")
        return batch_id

    async def test_analyses_list_real_data(self):
        """Test 4: GET /analyses retourne donn√©es r√©elles (pas de liste vide)"""
        async with httpx.AsyncClient(timeout=TEST_TIMEOUT) as client:
            response = await client.get(f"{BASE_URL}/api/v1/analyses?page=1&size=10")
            
        assert response.status_code == 200
        data = response.json()
        
        # V√©rification structure r√©elle
        assert "items" in data
        assert "total" in data
        assert isinstance(data["items"], list)
        
        # Si des analyses existent, v√©rifier structure
        if data["total"] > 0:
            analysis = data["items"][0]
            expected_fields = ["id", "asin", "roi_percentage", "profit_estimate", "created_at"]
            for field in expected_fields:
                assert field in analysis, f"Champ manquant: {field}"
        
        print(f"‚úÖ GET /analyses retourne {data['total']} analyses r√©elles")

    async def test_strategic_views_keepa_data(self):
        """Test 5: Vues strat√©giques utilisent donn√©es Keepa r√©elles"""
        views_to_test = ["profit_hunter", "velocity", "cashflow_hunter", "balanced_score"]
        
        async with httpx.AsyncClient(timeout=TEST_TIMEOUT) as client:
            for view_name in views_to_test:
                response = await client.get(f"{BASE_URL}/api/v1/views/{view_name}")
                
                assert response.status_code == 200
                data = response.json()
                
                # V√©rification structure vue strat√©gique
                assert "view_name" in data
                assert "description" in data
                assert "scoring_criteria" in data
                
                # V√©rification absence de donn√©es simul√©es
                assert "simulation" not in str(data).lower()
                assert "mock" not in str(data).lower()
                assert "fake" not in str(data).lower()
                
        print(f"‚úÖ {len(views_to_test)} vues strat√©giques avec donn√©es Keepa r√©elles")

    async def test_analyses_filtering_real(self):
        """Test 6: Filtrage analyses avec param√®tres ROI/velocity r√©els"""
        async with httpx.AsyncClient(timeout=TEST_TIMEOUT) as client:
            # Test filtrage par ROI minimum
            response = await client.get(f"{BASE_URL}/api/v1/analyses?min_roi=50&page=1&size=5")
            assert response.status_code == 200
            data = response.json()
            
            # Si r√©sultats, v√©rifier que ROI >= 50%
            for analysis in data["items"]:
                if analysis.get("roi_percentage"):
                    assert analysis["roi_percentage"] >= 50
            
            # Test filtrage par velocity
            response = await client.get(f"{BASE_URL}/api/v1/analyses?min_velocity=0.5&page=1&size=5")
            assert response.status_code == 200
            
            print("‚úÖ Filtrage analyses fonctionnel avec crit√®res ROI/velocity")

    async def test_database_consistency(self):
        """Test 7: Coh√©rence donn√©es BDD ‚Üî API responses"""
        async with httpx.AsyncClient(timeout=TEST_TIMEOUT) as client:
            # R√©cup√©rer liste batches
            batches_response = await client.get(f"{BASE_URL}/api/v1/batches?page=1&size=5")
            assert batches_response.status_code == 200
            batches_data = batches_response.json()
            
            # Pour chaque batch, v√©rifier r√©cup√©ration par ID
            for batch in batches_data["items"][:3]:  # Limiter √† 3 pour performance
                batch_id = batch["id"]
                single_response = await client.get(f"{BASE_URL}/api/v1/batches/{batch_id}")
                assert single_response.status_code == 200
                single_batch = single_response.json()
                
                # V√©rification coh√©rence donn√©es
                assert single_batch["id"] == batch["id"]
                assert single_batch["name"] == batch["name"]
                assert single_batch["status"] == batch["status"]
            
            print("‚úÖ Coh√©rence donn√©es BDD ‚Üî API valid√©e")

    async def test_error_handling_real(self):
        """Test 8: Gestion d'erreurs r√©elle (pas de stubs d'erreur)"""
        async with httpx.AsyncClient(timeout=TEST_TIMEOUT) as client:
            # Test batch inexistant
            response = await client.get(f"{BASE_URL}/api/v1/batches/999999")
            assert response.status_code == 404
            error_data = response.json()
            assert "detail" in error_data
            
            # V√©rifier que ce n'est pas un stub d'erreur
            assert "PHASE_1_STUB" not in str(error_data)
            assert "mock error" not in str(error_data).lower()
            
            # Test donn√©es invalides
            invalid_batch = {"name": ""}  # Nom vide
            response = await client.post(f"{BASE_URL}/api/v1/batches", json=invalid_batch)
            assert response.status_code == 422  # Validation error
            
            print("‚úÖ Gestion d'erreurs r√©elle fonctionnelle")

# Tests d'ex√©cution
@pytest.mark.asyncio
async def test_complete_workflow():
    """Test complet du workflow corrections backend"""
    tester = TestBackendCorrections()
    
    print("\nüß™ D√âBUT TESTS END-TO-END - CORRECTIONS BACKEND")
    print("=" * 60)
    
    try:
        # S√©quence de tests
        await tester.test_server_health()
        await tester.test_batches_list_real_data()
        await tester.test_analyses_list_real_data()
        await tester.test_strategic_views_keepa_data()
        await tester.test_analyses_filtering_real()
        await tester.test_database_consistency()
        await tester.test_error_handling_real()
        
        # Test cr√©ation batch (n√©cessite donn√©es sample)
        sample_data = {
            "name": f"E2E Test Batch - {datetime.now(timezone.utc).strftime('%Y%m%d_%H%M%S')}",
            "description": "Test automatis√© des corrections backend",
            "asin_list": ["1292025824", "0134683943"],
            "config_name": "profit_hunter"
        }
        batch_id = await tester.test_create_batch_real_persistence(sample_data)
        
        print("=" * 60)
        print("‚úÖ TOUS LES TESTS END-TO-END R√âUSSIS")
        print(f"üì¶ Batch de test cr√©√©: ID {batch_id}")
        print("üéØ Backend pr√™t pour d√©veloppement frontend")
        
    except Exception as e:
        print(f"‚ùå √âCHEC TEST: {str(e)}")
        raise

if __name__ == "__main__":
    asyncio.run(test_complete_workflow())