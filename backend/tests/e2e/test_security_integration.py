"""
Tests de s√©curit√© et int√©gration pour valider l'authentification et les secrets
V√©rifie JWT, gestion Keepa API, et s√©curit√© des endpoints
"""
import pytest
import httpx
import asyncio
import keyring
from typing import Optional, Dict, Any

BASE_URL = "http://localhost:8000"
SECURITY_TIMEOUT = 30.0

class TestSecurityIntegration:
    """Tests s√©curit√© et int√©gration du backend"""
    
    async def test_keepa_api_key_security(self):
        """Test 1: V√©rification s√©curit√© cl√© API Keepa"""
        
        # V√©rifier que la cl√© Keepa est accessible via keyring
        try:
            # Tentative de r√©cup√©ration cl√© via diff√©rentes variations
            keepa_key = None
            for key_name in ["KEEPA_API_KEY", "keepa_api_key", "keepa-api-key"]:
                try:
                    keepa_key = keyring.get_password("memex", key_name)
                    if keepa_key:
                        break
                except Exception:
                    continue
            
            # Validation format cl√© Keepa (si trouv√©e)
            if keepa_key:
                assert len(keepa_key) > 10, "Cl√© Keepa trop courte"
                # Les cl√©s Keepa ont g√©n√©ralement un format sp√©cifique
                assert not keepa_key.startswith("sk-"), "Format cl√© incorrect (confusion OpenAI?)"
                print("‚úÖ Cl√© Keepa trouv√©e et format valid√©")
            else:
                print("‚ö†Ô∏è Cl√© Keepa non trouv√©e dans keyring - tests limit√©s")
                
        except Exception as e:
            print(f"‚ö†Ô∏è Test cl√© Keepa skipp√©: {str(e)}")
    
    async def test_api_endpoints_public_access(self):
        """Test 2: Endpoints publics accessibles sans authentification"""
        public_endpoints = [
            "/health",
            "/docs",
            "/openapi.json"
        ]
        
        async with httpx.AsyncClient(timeout=SECURITY_TIMEOUT) as client:
            for endpoint in public_endpoints:
                response = await client.get(f"{BASE_URL}{endpoint}")
                
                # Ces endpoints doivent √™tre accessibles
                assert response.status_code in [200, 302], f"Endpoint public {endpoint} inaccessible"
        
        print("‚úÖ Endpoints publics accessibles")

    async def test_sensitive_data_not_exposed(self):
        """Test 3: V√©rification que les donn√©es sensibles ne sont pas expos√©es"""
        endpoints_to_check = [
            "/api/v1/batches?page=1&size=5",
            "/api/v1/analyses?page=1&size=5",
            "/api/v1/views/profit_hunter"
        ]
        
        sensitive_patterns = [
            "api_key",
            "secret",
            "password",
            "token",
            "keepa_key",
            "openai_key"
        ]
        
        async with httpx.AsyncClient(timeout=SECURITY_TIMEOUT) as client:
            for endpoint in endpoints_to_check:
                response = await client.get(f"{BASE_URL}{endpoint}")
                
                if response.status_code == 200:
                    response_text = response.text.lower()
                    
                    # V√©rifier absence de donn√©es sensibles
                    for pattern in sensitive_patterns:
                        assert pattern not in response_text, f"Donn√©es sensibles expos√©es: {pattern} dans {endpoint}"
        
        print("‚úÖ Aucune donn√©e sensible expos√©e dans les r√©ponses API")

    async def test_error_messages_security(self):
        """Test 4: Messages d'erreur ne r√©v√®lent pas d'informations sensibles"""
        # Test endpoints avec param√®tres invalides
        test_cases = [
            "/api/v1/batches/99999999",  # ID inexistant
            "/api/v1/analyses?invalid_param=true",  # Param√®tre invalide
        ]
        
        async with httpx.AsyncClient(timeout=SECURITY_TIMEOUT) as client:
            for endpoint in test_cases:
                response = await client.get(f"{BASE_URL}{endpoint}")
                
                if response.status_code >= 400:
                    error_text = response.text.lower()
                    
                    # V√©rifier que les erreurs ne r√©v√®lent pas de chemins syst√®me
                    sensitive_info = [
                        "/users/",
                        "c:\\",
                        "database password",
                        "api key",
                        "secret key",
                        "traceback"
                    ]
                    
                    for info in sensitive_info:
                        assert info not in error_text, f"Information sensible dans erreur: {info}"
        
        print("‚úÖ Messages d'erreur s√©curis√©s")

    async def test_input_validation_security(self):
        """Test 5: Validation des entr√©es pour pr√©venir injections"""
        # Tentatives d'injection dans cr√©ation de batch
        malicious_inputs = [
            {"name": "<script>alert('xss')</script>"},
            {"name": "'; DROP TABLE batches; --"},
            {"description": "{{7*7}}"},  # Template injection
            {"asin_list": ["<script>", "javascript:alert(1)"]}
        ]
        
        async with httpx.AsyncClient(timeout=SECURITY_TIMEOUT) as client:
            for malicious_input in malicious_inputs:
                # Ajouter champs requis minimums
                batch_data = {
                    "name": "Test Batch",
                    "description": "Test description",
                    "asin_list": ["1234567890"],
                    "config_name": "profit_hunter"
                }
                batch_data.update(malicious_input)
                
                response = await client.post(f"{BASE_URL}/api/v1/batches", json=batch_data)
                
                # Doit soit valider et nettoyer, soit rejeter
                if response.status_code == 201:
                    # Si accept√©, v√©rifier que les donn√©es ont √©t√© nettoy√©es
                    created_batch = response.json()
                    for key, value in malicious_input.items():
                        if key in created_batch:
                            assert "<script>" not in str(created_batch[key])
                            assert "javascript:" not in str(created_batch[key])
                elif response.status_code == 422:
                    # Validation refus√©e - c'est correct
                    pass
                else:
                    pytest.fail(f"R√©ponse inattendue √† injection: {response.status_code}")
        
        print("‚úÖ Validation des entr√©es s√©curis√©e")

    async def test_rate_limiting_basic(self):
        """Test 6: Test basique de limitation de taux"""
        # Test avec beaucoup de requ√™tes rapides
        endpoint = "/health"
        rapid_requests = 50
        
        async with httpx.AsyncClient(timeout=SECURITY_TIMEOUT) as client:
            start_time = asyncio.get_event_loop().time()
            
            # Lancer beaucoup de requ√™tes rapidement
            tasks = []
            for _ in range(rapid_requests):
                tasks.append(client.get(f"{BASE_URL}{endpoint}"))
            
            responses = await asyncio.gather(*tasks, return_exceptions=True)
            end_time = asyncio.get_event_loop().time()
            
            # Analyser r√©ponses
            success_count = sum(1 for r in responses if isinstance(r, httpx.Response) and r.status_code == 200)
            rate_limited_count = sum(1 for r in responses if isinstance(r, httpx.Response) and r.status_code == 429)
            
            print(f"‚ö° Requ√™tes rapides ({rapid_requests}):")
            print(f"  Succ√®s: {success_count}")
            print(f"  Rate limited: {rate_limited_count}")
            print(f"  Dur√©e: {end_time - start_time:.2f}s")
            
            # Si rate limiting activ√©, v√©rifier qu'il fonctionne
            if rate_limited_count > 0:
                print("‚úÖ Rate limiting d√©tect√© et fonctionnel")
            else:
                print("‚ö†Ô∏è Pas de rate limiting d√©tect√© - peut √™tre normal en dev")

    async def test_cors_headers_security(self):
        """Test 7: V√©rification configuration CORS s√©curis√©e"""
        
        async with httpx.AsyncClient(timeout=SECURITY_TIMEOUT) as client:
            # Test requ√™te OPTIONS pour CORS
            response = await client.options(f"{BASE_URL}/api/v1/batches")
            
            # V√©rifier headers CORS
            cors_headers = response.headers
            
            # V√©rifier que CORS n'est pas trop permissif
            if "access-control-allow-origin" in cors_headers:
                origin = cors_headers["access-control-allow-origin"]
                # Ne devrait pas √™tre "*" en production
                if origin == "*":
                    print("‚ö†Ô∏è CORS tr√®s permissif - OK en d√©veloppement, v√©rifier en prod")
                else:
                    print(f"‚úÖ CORS configur√© avec origine sp√©cifique: {origin}")
            
            # V√©rifier m√©thodes autoris√©es
            if "access-control-allow-methods" in cors_headers:
                methods = cors_headers["access-control-allow-methods"]
                print(f"üìù M√©thodes CORS autoris√©es: {methods}")
        
        print("‚úÖ Configuration CORS v√©rifi√©e")

# Test d'ex√©cution principal
@pytest.mark.asyncio 
async def test_complete_security_suite():
    """Suite compl√®te des tests de s√©curit√©"""
    tester = TestSecurityIntegration()
    
    print("\nüîí D√âBUT TESTS S√âCURIT√â & INT√âGRATION")
    print("=" * 60)
    
    try:
        await tester.test_keepa_api_key_security()
        await tester.test_api_endpoints_public_access()
        await tester.test_sensitive_data_not_exposed()
        await tester.test_error_messages_security()
        await tester.test_input_validation_security()
        await tester.test_rate_limiting_basic()
        await tester.test_cors_headers_security()
        
        print("=" * 60)
        print("‚úÖ TOUS LES TESTS S√âCURIT√â R√âUSSIS")
        print("üîê Backend s√©curis√© et int√©grations valid√©es")
        
    except Exception as e:
        print(f"‚ùå √âCHEC TEST S√âCURIT√â: {str(e)}")
        raise

if __name__ == "__main__":
    asyncio.run(test_complete_security_suite())