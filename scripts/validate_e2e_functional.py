#!/usr/bin/env python3
"""
Validation Fonctionnelle End-to-End du AmazonFilterService
==========================================================

Ce script teste le AmazonFilterService avec des donn√©es r√©elles de l'API Keepa
pour valider que le filtrage fonctionne correctement selon diff√©rents sc√©narios.

Sc√©narios test√©s :
1. ASIN avec Amazon pr√©sent comme vendeur
2. ASIN avec Amazon absent (vendeurs tiers uniquement)
3. ASIN invalide/inexistant
"""

import os
import sys
import asyncio
from pathlib import Path

# Ajouter le chemin du backend au PYTHONPATH
backend_path = Path(__file__).parent.parent / "backend"
sys.path.append(str(backend_path))

import keyring
from app.services.amazon_filter_service import AmazonFilterService
from app.services.keepa_service import KeepaService

class FunctionalValidator:
    def __init__(self):
        # R√©cup√©rer la cl√© API depuis keyring
        try:
            keepa_api_key = keyring.get_password("memex", "KEEPA_API_KEY")
            if not keepa_api_key:
                raise ValueError("Cl√© API Keepa non configur√©e dans keyring")
        except Exception as e:
            raise ValueError(f"Impossible de r√©cup√©rer la cl√© Keepa : {e}")
        
        self.keepa_service = KeepaService(keepa_api_key)
        self.amazon_filter = AmazonFilterService()
        
        # ASINs de test pour diff√©rents sc√©narios
        self.test_cases = {
            "amazon_present": {
                "asin": "1250301696",  # Livre avec forte probabilit√© Amazon  
                "description": "Livre bestseller - forte probabilit√© Amazon pr√©sent",
                "expected_filtered": True
            },
            "amazon_absent": {
                "asin": "0316769487",  # Livre plus ancien, vendeurs tiers
                "description": "Livre ancien - vendeurs tiers probables",
                "expected_filtered": False
            },
            "invalid_asin": {
                "asin": "INVALID123",
                "description": "ASIN invalide - Doit g√©rer l'erreur proprement",
                "expected_filtered": None  # Erreur attendue
            }
        }

    async def validate_scenario(self, scenario_name: str, test_case: dict):
        """Valide un sc√©nario de test sp√©cifique."""
        print(f"\n{'='*60}")
        print(f"üß™ TEST : {scenario_name.upper()}")
        print(f"üì¶ ASIN : {test_case['asin']}")
        print(f"üìù Description : {test_case['description']}")
        print(f"üéØ R√©sultat Attendu : {'Filtr√©' if test_case['expected_filtered'] else 'Non Filtr√©' if test_case['expected_filtered'] is False else 'Erreur G√©r√©e'}")
        print(f"{'='*60}")

        try:
            # R√©cup√©rer les donn√©es depuis Keepa (un seul ASIN √† la fois)
            print("üîÑ R√©cup√©ration des donn√©es Keepa...")
            product_data = await self.keepa_service.get_product_data(test_case['asin'])
            
            if not product_data:
                print("‚ùå ERREUR : Aucune donn√©e retourn√©e par Keepa")
                return False
            print(f"‚úÖ Donn√©es r√©cup√©r√©es pour : {product_data.get('title', 'Titre non disponible')[:50]}...")
            
            # Afficher les indicateurs Amazon d√©tect√©s
            self._display_amazon_indicators(product_data)
            
            # Tester le filtrage
            print("\nüîç Test du filtrage Amazon...")
            filter_result = self.amazon_filter.filter_amazon_products([product_data])
            
            # Le service retourne maintenant un dictionnaire avec 'products'
            filtered_products = filter_result.get('products', [])
            is_filtered = len(filtered_products) == 0  # Si la liste est vide, le produit a √©t√© filtr√©
            
            # Afficher les m√©triques de filtrage
            if 'filter_rate_percentage' in filter_result:
                print(f"üìä Taux de filtrage : {filter_result['filter_rate_percentage']}%")
            if 'filter_impact' in filter_result:
                print(f"üìã Impact : {filter_result['filter_impact']}")
            
            print(f"üìä R√©sultat : {'Filtr√© (Amazon d√©tect√©)' if is_filtered else 'Non Filtr√© (Amazon non d√©tect√©)'}")
            
            # V√©rifier si le r√©sultat correspond aux attentes
            success = is_filtered == test_case['expected_filtered']
            status = "‚úÖ SUCC√àS" if success else "‚ùå √âCHEC"
            
            print(f"\n{status} - Le comportement {'correspond' if success else 'ne correspond PAS'} aux attentes")
            
            return success
            
        except Exception as e:
            print(f"‚ö†Ô∏è  EXCEPTION : {str(e)}")
            
            # Pour un ASIN invalide, une exception est acceptable
            if test_case['expected_filtered'] is None:
                print("‚úÖ Exception attendue pour ASIN invalide - SUCC√àS")
                return True
            else:
                print("‚ùå Exception inattendue - √âCHEC")
                return False

    def _display_amazon_indicators(self, product_data: dict):
        """Affiche les indicateurs utilis√©s pour d√©tecter Amazon."""
        print("\nüîç Indicateurs Amazon d√©tect√©s :")
        
        # availabilityAmazon
        availability = product_data.get('availabilityAmazon', 'Non disponible')
        print(f"   ‚Ä¢ availabilityAmazon : {availability}")
        
        # csv (price history)
        csv_data = product_data.get('csv', [])
        has_price_history = len(csv_data) > 0
        print(f"   ‚Ä¢ Historique prix CSV : {'Pr√©sent' if has_price_history else 'Absent'} ({len(csv_data)} points)")
        
        # buyBoxSellerIdHistory
        buybox_history = product_data.get('buyBoxSellerIdHistory') or []
        has_buybox_amazon = False
        if buybox_history:
            has_buybox_amazon = any(seller_id == 1 for seller_id in buybox_history if isinstance(seller_id, int))
        print(f"   ‚Ä¢ Historique Buy Box Amazon : {'D√©tect√©' if has_buybox_amazon else 'Non d√©tect√©'} ({buybox_history})")

    async def run_all_tests(self):
        """Ex√©cute tous les tests de validation."""
        print("üöÄ VALIDATION FONCTIONNELLE E2E - AmazonFilterService")
        print("=" * 80)
        
        print("üîë Cl√© API Keepa configur√©e et pr√™te")
        
        results = {}
        
        # Ex√©cuter chaque test
        for scenario_name, test_case in self.test_cases.items():
            results[scenario_name] = await self.validate_scenario(scenario_name, test_case)
        
        # R√©sum√© des r√©sultats
        print(f"\n{'='*80}")
        print("üìã R√âSUM√â DES TESTS")
        print(f"{'='*80}")
        
        total_tests = len(results)
        successful_tests = sum(results.values())
        
        for scenario_name, success in results.items():
            status = "‚úÖ PASS√â" if success else "‚ùå √âCHOU√â"
            print(f"   {scenario_name:20} : {status}")
        
        print(f"\nüéØ Score Global : {successful_tests}/{total_tests} tests r√©ussis")
        
        if successful_tests == total_tests:
            print("üéâ VALIDATION COMPL√àTE : Le AmazonFilterService fonctionne correctement !")
            return True
        else:
            print("‚ö†Ô∏è  PROBL√àMES D√âTECT√âS : Des corrections sont n√©cessaires.")
            return False

async def main():
    """Point d'entr√©e principal."""
    validator = FunctionalValidator()
    success = await validator.run_all_tests()
    
    # Code de sortie pour int√©gration CI/CD
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    asyncio.run(main())