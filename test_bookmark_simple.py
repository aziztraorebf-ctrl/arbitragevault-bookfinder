"""Test simple pour valider la fonctionnalit√© de bookmarking avec des donn√©es r√©alistes."""

import sys
import os
sys.path.append('C:\\Users\\azizt\\Workspace\\arbitragevault_bookfinder\\backend')

from app.schemas.bookmark import NicheCreateSchema
from app.services.bookmark_service import BookmarkService
from app.models.bookmark import SavedNiche
from sqlalchemy.orm import Session
from unittest.mock import Mock
import json

def test_with_realistic_keepa_data():
    """Test avec des donn√©es r√©alistes bas√©es sur les structures Keepa."""
    
    # Donn√©es de filtres r√©alistes bas√©es sur les param√®tres Keepa
    realistic_filters = {
        # Crit√®res de prix (en dollars)
        "min_price": 15.0,
        "max_price": 150.0,
        
        # BSR (Best Seller Rank) - utilise csv[3] dans Keepa
        "min_bsr": 10000,
        "max_bsr": 500000,
        
        # Crit√®res de rentabilit√©
        "min_roi": 25.0,  # ROI minimum en %
        "min_margin_percent": 20.0,
        
        # Crit√®res de concurrence
        "max_sellers": 8,
        "min_price_stability": 0.7,
        
        # P√©riode d'analyse
        "analysis_period_days": 90,
        
        # Crit√®res sp√©cifiques aux livres
        "include_textbooks": True,
        "exclude_ebooks": True,
        "min_review_count": 10
    }
    
    # Cr√©ation d'une niche avec des param√®tres Keepa r√©alistes
    niche_data = NicheCreateSchema(
        niche_name="Medical Textbooks - High Value",
        category_id=13, # Engineering & Transportation sur Keepa
        category_name="Books > Medical > Textbooks",
        filters=realistic_filters,
        last_score=8.2,  # Score √©lev√© bas√© sur notre algorithme
        description="Niche d√©couverte via analyse Keepa - Livres m√©dicaux avec forte demande et marges √©lev√©es"
    )
    
    # Mock database session
    mock_db = Mock(spec=Session)
    mock_db.query.return_value.filter.return_value.first.return_value = None  # Pas de doublon
    mock_db.add.return_value = None
    mock_db.commit.return_value = None
    mock_db.refresh.return_value = None
    
    # Test service
    service = BookmarkService(mock_db)
    user_id = "test-user-123"
    
    # Cr√©ation de la niche
    result = service.create_niche(user_id, niche_data)
    
    # V√©rifications
    print("=== TEST BOOKMARK SERVICE AVEC DONN√âES R√âALISTES ===")
    print(f"‚úÖ Niche cr√©√©e: {result.niche_name}")
    print(f"‚úÖ Category ID: {result.category_id}")
    print(f"‚úÖ User ID: {result.user_id}")
    print(f"‚úÖ Score: {result.last_score}")
    
    # V√©rification des filtres stock√©s
    stored_filters = result.filters
    print(f"‚úÖ Filtres stock√©s ({len(stored_filters)} param√®tres):")
    for key, value in stored_filters.items():
        print(f"   - {key}: {value}")
    
    # Test de r√©cup√©ration des filtres pour r√©-analyse
    print(f"\n=== TEST R√âCUP√âRATION FILTRES POUR 'RELANCER L'ANALYSE' ===")
    
    # Mock pour la r√©cup√©ration
    mock_db.query.return_value.filter.return_value.first.return_value = result
    
    retrieved_filters = service.get_niche_filters_for_analysis(user_id, result.id)
    
    print(f"‚úÖ Filtres r√©cup√©r√©s pour r√©-analyse:")
    print(json.dumps(retrieved_filters, indent=2))
    
    # V√©rification que les filtres correspondent aux param√®tres Keepa
    keepa_compatible_fields = [
        'min_price', 'max_price', 'min_bsr', 'max_bsr', 'min_roi', 
        'max_sellers', 'min_price_stability'
    ]
    
    missing_fields = [field for field in keepa_compatible_fields if field not in retrieved_filters]
    if not missing_fields:
        print(f"‚úÖ Tous les champs compatibles Keepa sont pr√©sents")
    else:
        print(f"‚ùå Champs manquants: {missing_fields}")
    
    print("\n=== VALIDATION STRUCTURE DONN√âES ===")
    
    # Simuler l'utilisation des filtres avec l'API Keepa  
    simulated_keepa_query = {
        # Param√®tres de recherche Keepa bas√©s sur nos filtres
        "current_AMAZON_gte": int(retrieved_filters["min_price"] * 100),  # Keepa utilise les centimes
        "current_AMAZON_lte": int(retrieved_filters["max_price"] * 100),
        "current_SALES_gte": retrieved_filters["min_bsr"],
        "current_SALES_lte": retrieved_filters["max_bsr"],
        "categories_include": [result.category_id],
        "sort": ["current_SALES", "asc"]  # Tri par BSR
    }
    
    print(f"‚úÖ Requ√™te Keepa g√©n√©r√©e √† partir des filtres sauvegard√©s:")
    print(json.dumps(simulated_keepa_query, indent=2))
    
    return True

if __name__ == "__main__":
    try:
        test_with_realistic_keepa_data()
        print("\nüéâ TOUS LES TESTS SONT PASS√âS!")
        print("   - Structures de donn√©es align√©es avec Keepa")
        print("   - Fonctionnalit√© 'Relancer l'analyse' valid√©e")
        print("   - Compatibilit√© filtres ‚Üî param√®tres Keepa confirm√©e")
        
    except Exception as e:
        print(f"\n‚ùå ERREUR DANS LE TEST: {e}")
        import traceback
        traceback.print_exc()