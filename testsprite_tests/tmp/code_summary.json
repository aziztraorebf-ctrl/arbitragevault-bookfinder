{
  "tech_stack": ["python", "fastapi", "sqlalchemy", "asyncpg", "postgresql", "uvicorn", "alembic", "pydantic", "pytest"],
  "features": [
    {
      "name": "Health Check API",
      "description": "Health endpoints for liveness and readiness probes with database connectivity check",
      "files": [
        "app/api/v1/routers/health.py",
        "app/core/db.py"
      ],
      "api_doc": {
        "paths": {
          "/api/v1/health/live": {
            "get": {
              "summary": "Liveness probe - check if application is running",
              "responses": {
                "200": {
                  "description": "Application is alive",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "status": {"type": "string", "example": "alive"},
                          "service": {"type": "string"},
                          "version": {"type": "string"},
                          "environment": {"type": "string"}
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "/api/v1/health/ready": {
            "get": {
              "summary": "Readiness probe - check if application is ready to serve traffic",
              "responses": {
                "200": {
                  "description": "Application is ready (database connected)",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "status": {"type": "string", "example": "ready"},
                          "service": {"type": "string"},
                          "version": {"type": "string"},
                          "environment": {"type": "string"},
                          "checks": {
                            "type": "object",
                            "properties": {
                              "database": {"type": "string", "example": "healthy"}
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "503": {
                  "description": "Application is not ready (database issues)",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "status": {"type": "string", "example": "not_ready"},
                          "service": {"type": "string"},
                          "version": {"type": "string"},
                          "environment": {"type": "string"},
                          "checks": {
                            "type": "object",
                            "properties": {
                              "database": {"type": "string", "example": "unhealthy"}
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    {
      "name": "Database Management",
      "description": "AsyncIO database connection manager with SQLAlchemy, connection pooling, and health checks for PostgreSQL on Render",
      "files": [
        "app/core/db.py",
        "app/core/settings.py"
      ],
      "api_doc": {
        "components": {
          "schemas": {
            "DatabaseManager": {
              "type": "object",
              "description": "Manages database connections with connection pooling optimized for Render PostgreSQL Basic (256MB)",
              "properties": {
                "initialize": {"description": "Initialize database engine with SSL for Render PostgreSQL"},
                "health_check": {"description": "Check database connectivity with SELECT 1 query"},
                "get_session": {"description": "Get async database session"},
                "close": {"description": "Close database engine and dispose connections"}
              }
            }
          }
        }
      }
    },
    {
      "name": "Application Settings",
      "description": "Pydantic-based configuration management with database URL transformation for asyncpg compatibility",
      "files": [
        "app/core/settings.py"
      ],
      "api_doc": {
        "components": {
          "schemas": {
            "Settings": {
              "type": "object",
              "description": "Application configuration with automatic postgresql:// to postgresql+asyncpg:// transformation",
              "properties": {
                "database_url": {"type": "string", "description": "PostgreSQL connection URL with auto asyncpg transformation"},
                "app_env": {"type": "string", "example": "production"},
                "debug": {"type": "boolean"},
                "app_name": {"type": "string", "example": "ArbitrageVault API"},
                "version": {"type": "string", "example": "1.6.3"}
              }
            }
          }
        }
      }
    },
    {
      "name": "Authentication API",
      "description": "JWT-based authentication with user registration, login, and session management",
      "files": [
        "app/api/v1/routers/auth.py",
        "app/core/auth.py",
        "app/core/security.py"
      ]
    },
    {
      "name": "Book Analysis API",
      "description": "Book arbitrage analysis with profit calculations and market data processing",
      "files": [
        "app/api/v1/routers/analyses.py",
        "app/repositories/analysis_repository.py",
        "app/services/analysis_service.py"
      ]
    },
    {
      "name": "Batch Processing API",
      "description": "Batch processing for multiple book analyses with queue management",
      "files": [
        "app/api/v1/routers/batches.py",
        "app/repositories/batch_repository.py",
        "app/services/batch_service.py"
      ]
    },
    {
      "name": "Keepa Integration API",
      "description": "Integration with Keepa API for Amazon product data retrieval and pricing history",
      "files": [
        "app/api/v1/routers/keepa.py",
        "app/services/keepa_service.py"
      ]
    }
  ]
}